swagger: '2.0'
info:
  version: '1.0'
  title: Todo
  description: App used for keep track of items
basePath: /v1
schemes:
  - http
consumes:
  - application/json
  - application/JSON
produces:
  - application/json
  - application/JSON
tags:
  - name: Todo
paths:
  /todo:
    get:
      summary: Get all todo items
      description: Gets all todo items in database
      tags:
        - Todo
      responses:
        '200':
          description: 'Found all locations'
          schema:
            type: array
            items:
              $ref: '#/definitions/todo'
        '500':
          description: 'internal error'
          schema:
            $ref: '#/definitions/error-response'
    post:
      summary: Create todo item
      operationId: createItem
      tags:
        - Todo
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/todoInput'
      responses:
        '201':
          description: Created todo item
          schema:
            $ref: '#/definitions/todo'
        '400':
          description: Invalid input
          schema:
            $ref: '#/responses/BadRequest'
    put:
      summary: Update todo item
      operationId: updateItem
      tags:
        - Todo
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/todoInput'
      responses:
        '200':
          description: Updated todo item
          schema:
            $ref: '#/definitions/todo'
        '400':
          description: Invalid input
          schema:
            $ref: '#/responses/BadRequest'

  /todo/{id}:
    get:
      summary: Get todo item
      description: Gets todo item by ID provided
      operationId: getItem
      tags:
        - Todo
      parameters:
        - type : integer
          format: int64
          name: id
          in: path
          required: true
      responses:
        '200':
          description: 'Found todo item by ID'
          schema:
            $ref: '#/definitions/todo'
        '400':
          description: 'Invalid ID'
          schema:
            $ref: '#/responses/NotFound'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/responses/NotFound'
    delete:
      summary: Delete todo item
      description: Deletes todo item by ID
      operationId: deleteItem
      parameters:
        - type: integer
          format: int64
          name: id
          in: path
          required: true
      responses:
        '204':
          $ref: '#/responses/Deleted'
        '400':
          $ref: '#/responses/NotFound'


responses:
  'Deleted':
    description: Sucessful
    schema:
      type: string
      description: Successfully deleted
  'BadRequest':
    description: Bad Request
    schema:
      $ref: '#/definitions/error-response'
  'NotFound':
    description: Not Found
    schema:
      description: Primary resource not found

definitions:
  error-response:
    title: Error Response
    type: object
    x-go-type:
      import:
        package: 'github.com/SAKA-club/todo/backend/errs'
        alias: 'errs'
      type: 'TodoError'
    properties:
      code:
        type: string
      message:
        type: string
      field:
        type: string

  todo:
    type: object
    required:
      - id
      - title
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      body:
        type: string
      priority:
        type: boolean
      finish_by:
        type: string
        format: date
        example: "2022-05-05"

  todoInput:
    type: object
    required:
      - title
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      body:
        type: string
      priority:
        type: boolean
      finish_by:
        type: string
        format: date
        example: "2022-05-05"
